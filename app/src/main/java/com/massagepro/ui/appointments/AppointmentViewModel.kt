package com.massagepro.ui.appointments

import androidx.lifecycle.*
import com.massagepro.data.dao.AppointmentDao
import com.massagepro.data.dao.ClientDao
import com.massagepro.data.dao.ServiceDao
import com.massagepro.data.model.Appointment
import com.massagepro.data.model.Client
import com.massagepro.data.model.Service
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.map
import kotlinx.coroutines.launch
import java.util.*

class AppointmentViewModel(
    private val appointmentDao: AppointmentDao,
    private val clientDao: ClientDao,
    private val serviceDao: ServiceDao
) : ViewModel() {

    // –≠—Ç–∏ —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    val allAppointments: LiveData<List<Appointment>> = appointmentDao.getAllAppointments().asLiveData()
    val allClients: LiveData<List<Client>> = clientDao.getAllClients().asLiveData()
    val allServices: LiveData<List<Service>> = serviceDao.getAllServices().asLiveData()

    fun insertAppointment(appointment: Appointment) = viewModelScope.launch {
        appointmentDao.insertAppointment(appointment)
    }

    fun updateAppointment(appointment: Appointment) = viewModelScope.launch {
        appointmentDao.updateAppointment(appointment)
    }

    fun deleteAppointment(appointment: Appointment) = viewModelScope.launch {
        appointmentDao.deleteAppointment(appointment)
    }

    suspend fun getAppointmentById(appointmentId: Int): Appointment? {
        return appointmentDao.getAppointmentById(appointmentId)
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Date –≤ Long –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ DAO.
     * –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –æ—à–∏–±–∫—É –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–æ–≤.
     */
    suspend fun getConflictingAppointments(startTime: Date, endTime: Date, excludeAppointmentId: Int): List<Appointment> {
        return appointmentDao.getConflictingAppointments(startTime.time, endTime.time, excludeAppointmentId)
    }

    suspend fun getClientById(clientId: Int): Client? {
        return clientDao.getClientById(clientId)
    }

    suspend fun getServiceById(serviceId: Int): Service? {
        return serviceDao.getServiceById(serviceId)
    }

    /**
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —É–∂–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –≤ –≤–∞—à–µ–º –∫–æ–¥–µ. –û–Ω –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
     * –û–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–µ—Ç Long –≤ DAO.
     */
    fun getFilteredAppointments(startDate: Date, endDate: Date, clientId: Int?, status: String): Flow<List<Appointment>> {
        val safeStart = normalizeStartOfDay(startDate).time
        val safeEnd = normalizeEndOfDay(endDate).time

        println("üîç –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ: —Å $safeStart –ø–æ $safeEnd")

        return appointmentDao.getAppointmentsForDateRange(safeStart, safeEnd).map { appointments ->
            println("üìã –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î: ${appointments.size}")
            appointments.filter { appointment ->
                val matchesClient = clientId == null || appointment.clientId == clientId
                val matchesStatus = status == "–í—Å–µ" || appointment.status == status
                matchesClient && matchesStatus
            }.also {
                println("‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ (–∫–ª–∏–µ–Ω—Ç + —Å—Ç–∞—Ç—É—Å): ${it.size}")
            }
        }
    }

    private fun normalizeStartOfDay(date: Date): Date {
        return Calendar.getInstance().apply {
            time = date
            set(Calendar.HOUR_OF_DAY, 0)
            set(Calendar.MINUTE, 0)
            set(Calendar.SECOND, 0)
            set(Calendar.MILLISECOND, 0)
        }.time
    }

    private fun normalizeEndOfDay(date: Date): Date {
        return Calendar.getInstance().apply {
            time = date
            set(Calendar.HOUR_OF_DAY, 23)
            set(Calendar.MINUTE, 59)
            set(Calendar.SECOND, 59)
            set(Calendar.MILLISECOND, 999)
        }.time
    }
}

/**
 * –§–∞–±—Ä–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ViewModel —Å –ø–µ—Ä–µ–¥–∞—á–µ–π DAO –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
 */
class AppointmentViewModelFactory(
    private val appointmentDao: AppointmentDao,
    private val clientDao: ClientDao,
    private val serviceDao: ServiceDao
) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(AppointmentViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return AppointmentViewModel(appointmentDao, clientDao, serviceDao) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }
}
